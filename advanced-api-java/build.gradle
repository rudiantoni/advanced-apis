plugins {
  id 'java'
  id 'jacoco'
  id 'org.springframework.boot' version '2.7.10'
  id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.myapps'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.flywaydb:flyway-core:9.16.0'
  implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
  implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
  implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

  compileOnly 'org.projectlombok:lombok'

  runtimeOnly 'org.postgresql:postgresql'

  annotationProcessor 'org.projectlombok:lombok'

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation 'com.h2database:h2'

}

tasks.named('test') {
  useJUnitPlatform()

  finalizedBy jacocoTestReport
}

jacocoTestReport {
  dependsOn test

  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: [
        "**/AdvancedApiJavaApplication.class",
        "**/JwtService.class",
        "**/JwtAuthenticationFilter.class",
        "**/config/*",
        "**/controller/*",
        "**/enums/*",
        "**/exception/*",
        "**/dto/*",
        "**/entity/*",
        "**/model/*",
        "**/util/*",
      ])
    }))
  }
}
